prompts:
  - name: argocdDomainName
    default: argocd.example.com
    message: 'Please enter the domain name you want argocd to be accessible on:'
    type: Input
  - name: mssqlDomainName
    default: mssql.example.com
    message: 'Please enter the domain name you want mssql to be accessible on:'
    type: Input
  - message: 'Please enter the email address you want to use for lets encrypt:'
    default: admin@example.com
    name: letsEncryptClusterIssuerEmailAddress
    type: Input
  - message: 'Please enter root password '
    default: password
    name: rootPassword
    type: Secret
outputs:
  cndi-config:
    cndi_version: v1
    infrastructure:
      cndi:
        cert_manager:
          email: '{{ $.cndi.prompts.responses.letsEncryptClusterIssuerEmailAddress }}'
        open_ports:
          - number: 1433
            name: mssql
            namespace: mssql-azure
            service: mssql-0
        nodes:
          - name: x-mssql-node
            kind: azure
            role: leader
            instance_type: Standard_D4s_v3
            volume_size: 128
          - name: y-mssql-node
            kind: azure
            volume_size: 128
          - name: z-mssql-node
            kind: azure
            volume_size: 128
    cluster_manifests:
      mssql:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: mssql-azure

      argo-ingress:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: argocd-server-ingress
          namespace: argocd
          annotations:
            cert-manager.io/cluster-issuer: cluster-issuer
            kubernetes.io/tls-acme: 'true'
            nginx.ingress.kubernetes.io/ssl-passthrough: 'true'
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        spec:
          tls:
            - hosts:
                - '{{ $.cndi.prompts.responses.argocdDomainName }}'
              secretName: cluster-issuer-private-key
          rules:
            - host: '{{ $.cndi.prompts.responses.argocdDomainName }}'
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: argocd-server
                        port:
                          name: https
      mssql-ingress:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: mssql-0-ingress
          namespace: mssql-azure
          annotations:
            cert-manager.io/cluster-issuer: cluster-issuer
            kubernetes.io/tls-acme: 'true'
            nginx.ingress.kubernetes.io/ssl-passthrough: 'true'
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        spec:
          tls:
            - hosts:
                - '{{ $.cndi.prompts.responses.mssqlDomainName }}'
              secretName: cluster-issuer-private-key
          rules:
            - host: '{{ $.cndi.prompts.responses.mssqlDomainName }}'
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: mssql-0
                        port:
                          number: 1433
      mssql-storageclass:
        kind: StorageClass
        apiVersion: storage.k8s.io/v1
        metadata:
          name: azure-disk
          namespace: mssql-azure
        provisioner: kubernetes.io/azure-disk
        parameters:
          storageAccountType: Standard_LRS
          kind: Managed

      mssql-service:
        apiVersion: v1
        kind: Service
        metadata:
          name: mssql-0
          namespace: mssql-azure
        spec:
          selector:
            statefulset.kubernetes.io/pod-name: mssql-0
          ports:
            - protocol: TCP
              port: 1433
              targetPort: 1433
      mssql-configmap:
        kind: ConfigMap
        apiVersion: v1
        metadata:
          name: mssql
          namespace: mssql-azure
        data:
          mssql.conf: |
            [EULA]
            accepteula = Y
            accepteulaml = Y

            [coredump]
            captureminiandfull = true
            coredumptype = full

            [hadr]
            hadrenabled = 1

            [language]
            lcid = 1033
      mssql-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: mssql-secret
          namespace: mssql-azure
          labels:
            argocd.argoproj.io/secret-type: cluster
        type: Opaque
        stringData:
          MSSQL_SA_PASSWORD: $.cndi.secrets.seal(MSSQL_SA_PASSWORD)
      mssql-statefulset:
        apiVersion: apps/v1
        kind: StatefulSet
        metadata:
          name: mssql # name of the StatefulSet workload, the SQL Server instance name is derived from this. We suggest to keep this name same as the .spec.template.metadata.labels, .spec.selector.matchLabels and .spec.serviceName to avoid confusion.
          namespace: mssql-azure
          labels:
            app: mssql
        spec:
          serviceName: "mssql" # serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set.
          replicas: 1 # only one pod, with one SQL Server instance deployed.
          selector:
            matchLabels:
              app: mssql  # this has to be the same as .spec.template.metadata.labels
          template:
            metadata:
              labels:
                app: mssql # this has to be the same as .spec.selector.matchLabels, as documented [here](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/):
            spec:
              securityContext:
                fsGroup: 10001
              containers:
              - name: mssql # container name within the pod.
                # command:
                #   - /bin/bash
                #   - -c
                #   - cp /var/opt/mssql/mssql.conf /var/opt/mssql/mssql.conf && /opt/mssql/bin/sqlservr
                image: mcr.microsoft.com/mssql/server:2019-latest
                ports:
                - containerPort: 1433
                  name: tcpsql
                env:
                - name: MSSQL_PID
                  value: "Developer"
                - name: ACCEPT_EULA
                  value: "Y"
                - name: MSSQL_AGENT_ENABLED
                  value: "1"
                - name: MSSQL_SA_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mssql-secret
                      key: MSSQL_SA_PASSWORD
                # volumeMounts:
                # - name: mssql
                #   mountPath: "/var/opt/mssql"
          volumeClaimTemplates:
            - metadata:
                name: mssql
              spec:
                accessModes:
                - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
    applications:
  env:
    extend_basic_env: azure
    entries:
      - name: MSSQL_SA_PASSWORD
        value: '{{ $.cndi.prompts.responses.rootPassword }}'
  readme:
    extend_basic_readme: azure
    template_section: |-
      ## mssql

       This template deploys a Mssql  cluster with one server instance.



