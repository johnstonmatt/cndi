blocks: 
  - name: internal_listener
    content:
      listeners:
        - name: internaltls
          port: 9093
          type: internal
          tls: true
  
  - name: external_listener
    content:
      listeners:
        - name: internaltls
          port: 9093
          type: internal
          tls: true

        - name: externaltls
          port: 9094
          type: ingress
          tls: true
          configuration:
            class: public
            bootstrap:
              alternativeNames:
                - "{{ $cndi.get_prompt_response(kafka_bootstrap_hostname) }}"
              annotations:
                external-dns.alpha.kubernetes.io/hostname: "{{ $cndi.get_prompt_response(kafka_bootstrap_hostname) }}"
                external-dns.alpha.kubernetes.io/ttl: "60"
                nginx.ingress.kubernetes.io/ssl-passthrough: "true"
              host: "{{ $cndi.get_prompt_response(kafka_bootstrap_hostname) }}"
            brokers:
              - broker: 0
                annotations:
                  nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                  external-dns.alpha.kubernetes.io/hostname: "0-{{ $cndi.get_prompt_response(kafka_broker_hostname) }}"
                  external-dns.alpha.kubernetes.io/ttl: "60"
                host: "0-{{ $cndi.get_prompt_response(kafka_broker_hostname) }}"
              - broker: 1
                annotations:
                  nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                  external-dns.alpha.kubernetes.io/hostname: "1-{{ $cndi.get_prompt_response(kafka_broker_hostname) }}"   
                  external-dns.alpha.kubernetes.io/ttl: "60"
                host: "1-{{ $cndi.get_prompt_response(kafka_broker_hostname) }}"                             
              - broker: 2
                annotations:
                  nginx.ingress.kubernetes.io/ssl-passthrough: "true"
                  external-dns.alpha.kubernetes.io/hostname: "2-{{ $cndi.get_prompt_response(kafka_broker_hostname) }}"   
                  external-dns.alpha.kubernetes.io/ttl: "60"
                host: "2-{{ $cndi.get_prompt_response(kafka_broker_hostname) }}" 

  - name: deploy_kafka_ui_ingress_blk
    content:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: kafka-ui-ingress
        namespace: kafka
        annotations:
          cert-manager.io/cluster-issuer: cluster-issuer
          kubernetes.io/tls-acme: 'true'
          external-dns.alpha.kubernetes.io/hostname: "{{ $cndi.get_prompt_response(kafka_ui_hostname) }}"
      spec:
        ingressClassName: public
        tls:
          - hosts:
              - "{{ $cndi.get_prompt_response(kafka_ui_hostname) }}"
            secretName: cluster-issuer-private-key-kafka-ui
        rules:
          - host: "{{ $cndi.get_prompt_response(kafka_ui_hostname) }}"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: kafka-ui
                      port:
                        number: 80                

prompts:
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/core-prompts.yaml):
      {}
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/core-prompts.yaml):
      {}

  - name: deploy_argocd_ingress
    default: true
    message: >-
      Do you want to expose ArgoCD with an Ingress?
    type: Confirm

  - name: argocd_hostname
    default: argocd.example.com
    message: >-
      What hostname should ArgoCD be accessible at?
    type: Input
    validators:
      - hostname
    condition:
      - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
      - ==
      - true

  - name: kafka_cluster_name
    default: my-kafka-cluster
    message: >-
      What is the name of your kafka cluster?
    type: Input

  - name: kafka_broker_size
    default: "100"
    message: >-
      What is the size of your kafka brokers in GB?
    type: Input
  
  - name: enable_kafka_ingress
    default: true
    message: >-
      Do you want to expose Kafka to the web?
    type: Confirm

  - name: kafka_bootstrap_hostname
    default: my-kafka-cluster.bootstrap.com
    message: >-
      What hostname should the kafka cluster be accessible at?
    type: Input
    condition:
      - "{{ $cndi.get_prompt_response(enable_kafka_ingress) }}"
      - ==
      - true
      
  - name: kafka_broker_hostname
    default: my-kafka-cluster.broker.com
    message: >-
      What hostname should the kafka broker be accessible at?
    type: Input
    condition:
      - "{{ $cndi.get_prompt_response(enable_kafka_ingress) }}"
      - ==
      - true
  - name: deploy_kafka_ui_ingress
    default: true
    message: >-
      Do you want to expose kafka-ui to the web?
    type: Confirm
    condition:
      - "{{ $cndi.get_prompt_response(deploy_kafka_ui_application) }}"
      - ==
      - true

  - name: kafka_ui
    default: kafka-ui.example.com
    message: >-
      What hostname should kafka-ui be accessible at?
    type: Input
    validators:
      - hostname # FQDN
    condition:
      - "{{ $cndi.get_prompt_response(deploy_kafka_ui_application) }}"
      - ==
      - true
outputs:
  cndi_config:
    # source_control_platform: github ?
    cndi_version: v2
    project_name: "{{ $cndi.get_prompt_response(project_name) }}"
    provider: "{{ $cndi.get_prompt_response(deployment_target_provider) }}"
    distribution: "{{ $cndi.get_prompt_response(deployment_target_distribution) }}"
    # this is a Template comment
    infrastructure:
      cndi:
        cert_manager:
          email: "{{ $cndi.get_prompt_response(cert_manager_email) }}"
        ingress:
          nginx:
            public: 
              enabled: true
              values:
                controller:
                  extraArgs:
                    enable-ssl-passthrough: "true"
        external_dns: 
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/external-dns/config/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
            condition:
              - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
              - ==
              - true

        nodes:
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/basic-node-pool.yaml):
            {}

    cluster_manifests:
      broker-node-pool:
        apiVersion: kafka.strimzi.io/v1beta2
        kind: KafkaNodePool
        metadata:
          name: broker-node-pool
          namespace: kafka
          labels:
            strimzi.io/cluster: "{{ $cndi.get_prompt_response(kafka_cluster_name) }}"
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true,PrunePropagationPolicy=background
        spec:
          replicas: 3
          roles:
            - controller
            - broker
          storage:
            type: jbod
            volumes:
              - id: 0
                type: persistent-claim
                size: "{{ $cndi.get_prompt_response(kafka_broker_size) }}Gi"
                deleteClaim: true
                class: rwo
                kraftMetadata: shared

      my-kafka-cluster:
        apiVersion: kafka.strimzi.io/v1beta2
        kind: Kafka
        metadata:
          name: "{{ $cndi.get_prompt_response(kafka_cluster_name) }}"
          namespace: kafka
          annotations:
            strimzi.io/node-pools: enabled
            strimzi.io/kraft: enabled
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true,PrunePropagationPolicy=background
        spec:
          kafka:
            $cndi.get_block(internal_listener):
              condition:
                - "{{ $cndi.get_prompt_response(enable_kafka_ingress) }}"
                - ==
                - false

            $cndi.get_block(external_listener):
              condition:
                - "{{ $cndi.get_prompt_response(enable_kafka_ingress) }}"
                - ==
                - true

            version: 3.7.1
            config:
              offsets.topic.replication.factor: 3
              transaction.state.log.replication.factor: 3
              transaction.state.log.min.isr: 2
              default.replication.factor: 3
              min.insync.replicas: 2
              inter.broker.protocol.version: "3.7"
              ssl.endpoint.identification.algorithm: ''
              
          entityOperator:
            topicOperator: {}
            userOperator: {}

      argo-ingress:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/default-ingress.yaml):
          args:
            ingress_name: argocd-ingress
            ingress_class_name: public
            hostname: "{{ $cndi.get_prompt_response(argocd_hostname) }}"
            service_name: argocd-server
            service_port: 443
            namespace: argocd
          condition:
            - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
            - ==
            - true
            
      kafka_ui_ingress:
        $cndi.get_block(deploy_kafka_ui_ingress_blk):
          condition:
            - "{{ $cndi.get_prompt_response(deploy_kafka_ui_ingress) }}"
            - ==
            - true

      kafka-ui-configmap:

      external-dns-secret:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/external-dns/secret/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
          condition:
            - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
            - ==
            - true
    applications:
      kafka:
        targetRevision: 0.42.0
        destinationNamespace: kafka
        repoURL: "https://strimzi.io/charts/"
        chart: strimzi-kafka-operator
  env:
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/git-credentials-{{ $cndi.get_prompt_response(git_credentials_mode) }}-env.yaml):
      {}
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/env.yaml):
      {}
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/env.yaml):
      {}

  readme:
    project_name: "# {{ $cndi.get_prompt_response(project_name) }}"
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/core-readme.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/core.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/{{ $cndi.get_prompt_response(deployment_target_distribution) }}.md):
      {}

    kafka: |      
      # Strimzi Kafka Deployment Guide

      Strimzi simplifies the process of running Apache Kafka in a Kubernetes environment, making it easier to deploy and manage Kafka clusters. This guide provides detailed steps to configure, test, and use Kafka with the Strimzi operator.

      ## Connecting with a Client

      To connect securely to a Kafka cluster using SSL/TLS, you will need the cluster certificate, the truststore, and the truststore password. Once the cluster is deployed, you can connect to your cluster with the kubeconfig command found in the output of the cndi run. This template uses TLS encryption by default, so you need to extract the necessary security elements to access the cluster.

      ### Steps to Obtain and Use Certificates, Truststores, and Truststore Passwords

      #### Step 1: Retrieve the Truststore Certificate
      Replace `my-kafka-cluster` with the name of your cluster. Run the following command to get the CA certificate from the Kubernetes secret and save it to `ca.crt`:

      ```sh
      kubectl get secret my-kafka-cluster-cluster-ca-cert -n kafka -o jsonpath='{.data.ca\.crt}' | base64 -d > ca.crt
      ```

      #### Step 2: Retrieve the PKCS12 Truststore
      Replace `my-kafka-cluster` with the name of your cluster. Run the following command to get the PKCS12 truststore file from the Kubernetes secret and save it to `ca.p12`:

      ```sh
      kubectl get secret my-kafka-cluster-cluster-ca-cert -n kafka -o jsonpath='{.data.ca\.p12}' | base64 -d > ca.p12
      ```

      #### Step 3: Retrieve the Truststore Password
      Replace `my-kafka-cluster` with the name of your cluster. Run the following command to get the truststore password from the Kubernetes secret and save it to `ca.password.txt`:

      ```sh
      kubectl get secret my-kafka-cluster-cluster-ca-cert -n kafka -o jsonpath='{.data.ca\.password}' | base64 --decode > ca.password.txt
      ```

      These files (`ca.crt`, `ca.p12`, and `ca.password.txt`) will be used to configure your Kafka client for a secure connection.

      ### Connect to Kafka Cluster

      Once you have the TLS certificate, you can use the bootstrap host specified in the Kafka custom resource to connect to the Kafka cluster. Since Ingress uses TLS passthrough, you always have to connect on port 443. 

      To connect to the Kafka cluster, you need to use the bootstrap server address.

      ### Kafka Client CLI Installation and Configuration

      #### 1. Install Kafka Client Tools

      First, you need to install the Kafka client tools by downloading the Kafka binaries from the Apache Kafka website.

      **Step-by-Step Instructions:**

      **Download and Extract the Kafka Binaries:**

      Go to the [Apache Kafka download page](https://kafka.apache.org/downloads) and download the latest binary release.

      #### 2. Configure Kafka Client with SSL

      To securely connect to your Kafka cluster using SSL, you need the truststore files obtained earlier. Ensure you have `ca.p12` and `ca.password.txt`.

      #### 3. Use Kafka CLI Tools

      **Configure Environment Variables:**

      Set the environment variables to point to your Kafka installation and the truststore files.

      **Configure Kafka CLI with SSL:**

      Create a `client-ssl.properties` file with the following content:

      ```properties
      security.protocol=SSL
      ssl.truststore.location=/path/to/ca.p12
      ssl.truststore.password= password in the ca.password.txt
      ssl.truststore.type=PKCS12
      ```

      **Replace `/path/to/ca.p12` and `/path/to/ca.password.txt` with the actual paths to your files.**

      #### 4. Produce and Consume Messages

      **Produce Messages:**

      To produce messages to a Kafka topic: Replace `kafka-cluster.bootstrap.cndi.link` with the bootstrap dns address

      ```sh
      kafka-console-producer.sh --broker-list my-kafka-cluster.bootstrap.cndi.link:443 --topic my-topic --producer.config client-ssl.properties
      ```

      Type your messages and press Enter to send them. Use `Ctrl+C` to exit.

      **Consume Messages:**

      To consume messages from a Kafka topic: Replace `kafka-cluster.bootstrap.cndi.link` with the bootstrap dns address

      ```sh
      kafka-console-consumer.sh --bootstrap-server my-kafka-cluster.bootstrap.cndi.link:443 --topic my-topic --from-beginning --consumer.config client-ssl.properties
      ```

      This setup ensures secure communication between your Kafka clients and the Kafka cluster using SSL. If you need further assistance, feel free to ask!