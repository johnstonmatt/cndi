
prompts:
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/core-prompts.yaml):
      {}
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/core-prompts.yaml):
      {}

  - name: deploy_argocd_ingress
    default: true
    message: >-
      Do you want to expose ArgoCD with an Ingress?
    type: Confirm

  - name: argocd_hostname
    default: argocd.example.com
    message: >-
      What hostname should ArgoCD be accessible at?
    type: Input
    validators:
      - hostname # FQDN
    condition:
      - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
      - ==
      - true

  - name: tenant_domain_name
    default: tenant.example.com
    message: 'Enter the domain name for the MinIO tenant:'
    type: Input

  - name: tenant_servers
    default: 4
    message: 'Specify the number of tenant servers to deploy:'
    type: Number

  - name: volumes_per_tenant_server
    default: 2
    message: 'Specify the number of volumes per server:'
    type: Number

  - name: tenant_access_key
    default: '{{ $cndi.get_random_string(12) }}'
    message: 'Enter the access key(root user) for the MinIO tenant:'
    type: Secret

  - name: tenant_secret_key
    default: '{{ $cndi.get_random_string(24) }}'
    message: 'Enter the secret key(root password)  for the MinIO tenant:'
    type: Secret

  - name: tenant_name
    default: myminiotenant 
    message: 'Enter the name of the MinIO tenant:'
    type: Input

  - name: bucket_name
    default: myminiobucket
    message: 'Enter the name of the bucket to create in the MinIO tenant:'
    type: Input


outputs:
  cndi_config:
    cndi_version: v2
    project_name: "{{ $cndi.get_prompt_response(project_name) }}"
    provider: "{{ $cndi.get_prompt_response(deployment_target_provider) }}"
    distribution: "{{ $cndi.get_prompt_response(deployment_target_distribution) }}"
    infrastructure:
      cndi:
        cert_manager:
          email: "{{ $cndi.get_prompt_response(cert_manager_email) }}"

        external_dns: 
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/external-dns/config/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
            condition:
              - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
              - ==
              - true
              
        nodes:
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/basic-node-pool.yaml):
            {}

    cluster_manifests:
      tenant-server-ingress:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: tenant-server-ingress
          namespace: minio
          annotations:
            cert-manager.io/cluster-issuer: cluster-issuer
            kubernetes.io/tls-acme: 'true'
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        spec:
          tls:
          - hosts:
            - '{{ $cndi.get_prompt_response(tenant_domain_name) }}'
            secretName: cluster-issuer-private-key-minio
          rules:
          - host: '{{ $cndi.get_prompt_response(tenant_domain_name) }}'
            http:
              paths:
              - path: "/"
                pathType: Prefix
                backend:
                  service:
                    name: minio
                    port:
                      name: https-minio
      myminio-tenant-config:
        apiVersion: v1
        kind: Secret
        metadata:
          name: myminio-tenant-config
          namespace: minio
          annotations:
            sealedsecrets.bitnami.com/cluster-wide: "true"
          labels:
            argocd.argoproj.io/secret-type: cluster
            app.kubernetes.io/instance: tenant
        type: Opaque
        stringData:
          config.env: $cndi_on_ow.seal_secret_from_env_var(MINIO_TENANT_CREDENTIALS)
      tenant-crd:
        apiVersion: minio.min.io/v2
        kind: Tenant
        metadata:
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
          name: '{{ $cndi.get_prompt_response(tenant_name) }}'
          namespace: minio
          labels:
            app: minio
        spec:
          configuration:
            name: myminio-tenant-config
          pools:
            - servers: '{{ $cndi.get_prompt_response(tenant_servers) }}'
              volumesPerServer: '{{ $cndi.get_prompt_response(volumes_per_tenant_server) }}'
              volumeClaimTemplate:
                metadata:
                  name: data
                spec:
                  storageClassName: rwo
                  resources:
                    requests:
                      storage: 10Gi
          buckets:
            - name: '{{ $cndi.get_prompt_response(bucket_name) }}'
      argo-ingress:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/default-ingress.yaml):
          args:
            ingress_name: argocd-ingress
            ingress_class_name: public
            hostname: "{{ $cndi.get_prompt_response(argocd_hostname) }}"
            service_name: argocd-server
            service_port: 443
            namespace: argocd
          condition:
            - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
            - ==
            - true


      external-dns-secret: 
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/external-dns/secret/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
          condition:
            - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
            - ==
            - true

    applications:
      minio:
        chart: operator
        destinationNamespace: minio
        repoURL: https://operator.min.io/
        targetRevision: 5.0.6
  env:
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/git-credentials-{{ $cndi.get_prompt_response(git_credentials_mode) }}-env.yaml):
      {}
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/env.yaml):
      {}
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/env.yaml):
      {}

        
    $cndi.comment(minio-heading): sMinio Connection Parameters
    MINIO_TENANT_CREDENTIALS: | 
      "export MINIO_ROOT_USER='{{ $cndi.get_prompt_response(tenant_access_key) }}' 
      export MINIO_ROOT_PASSWORD='{{ $cndi.get_prompt_response(tenant_secret_key) }}'"
    MINIO_ROOT_USER: "{{ $cndi.get_prompt_response(tenant_access_key) }}"
    MINIO_ROOT_PASSWORD: "{{ $cndi.get_prompt_response(tenant_secret_key) }}"
    TENANT_DOMAIN_NAME: "{{ $cndi.get_prompt_response(tenant_domain_name) }}"
    MINIO_TENANT_NAME: "{{ $cndi.get_prompt_response(tenant_name) }}"

  readme:
    project_name: "# {{ $cndi.get_prompt_response(project_name) }}"
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/core-readme.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/core.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/{{ $cndi.get_prompt_response(deployment_target_distribution) }}.md):
      {}

    minio: |
      ## Minio
      MinIO is a high-performance, distributed object storage system designed to support cloud-native applications with S3-compatible storage for unstructured, semi-structured and structured data. 
      Some benefits of combining MinIO include:

      High Performance: MinIO writes as fast as they come in. MinIO is used to build high performance infrastructure for machine learning, analytics and application data workloads.
      Scalability: MinIO handles large amounts of data and scales horizontally across multiple nodes, This allows organizations to store and process massive amounts of data in real-time, making it suitable for big data and high-velocity data streaming use cases.
      Durability: MinIO provides durable storage, allowing organizations to retain data for long periods of time, such as for historical analysis, compliance requirements, or data recovery purposes.
      Fault Tolerance: MinIO erasure codes data across multiple nodes, providing fault tolerance and ensuring data durability.
      Easy Integration: MinIO is easily integrated with like aws s3, a built-in framework for connecting with external systems. This makes it straightforward to stream data to MinIO for storage, and vice versa for data retrieval.


      This template deploys a Standalone production ready
      [minio operator and tenant](https://github.com/minio/operator/tree/master)

      To test the connection you can install the [MinIO CLient](https://min.io/docs/minio/linux/reference/minio-mc.html).

      Create Alias
      ```
      bash +o history
      mc alias set ALIAS TENANT_DOMAIN_NAME MINIO_ROOT_USER MINIO_ROOT_PASSWORD
      bash -o history
      ```

      [Command](https://min.io/docs/minio/linux/reference/minio-mc/mc-cp.html) to copy object to or from Minio bucket.
      ```
      mc cp --recursive ~/mydata/ myminio/mydata/
      ```

      You can find the MINIO_TENANT_CREDENTIALS and TENANT_DOMAIN_NAME in the .env file.